/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * NodeConf API
 * This is the API for the NodeConf AR 2018
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@nodeconf.com.ar
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "https://virtserver.swaggerhub.com/nodeconf18-api-spec/nodeconf-api/1.0.0".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *  
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface Activity
 */
export interface Activity {
    /**
     * 
     * @type {string}
     * @memberof Activity
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Activity
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Activity
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof Activity
     */
    type: Activity.TypeEnum;
    /**
     * 
     * @type {Array&lt;Speaker&gt;}
     * @memberof Activity
     */
    speakers?: Array<Speaker>;
    /**
     * 
     * @type {string}
     * @memberof Activity
     */
    startTime?: string;
    /**
     * 
     * @type {string}
     * @memberof Activity
     */
    endTime?: string;
}

/**
 * @export
 * @namespace Activity
 */
export namespace Activity {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        Talk = <any> 'talk',
        Workshop = <any> 'workshop',
        Keynote = <any> 'keynote',
        Break = <any> 'break',
        Lunch = <any> 'lunch',
        Raffle = <any> 'raffle'
    }
}

/**
 * Response containing an error
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * 
     * @type {string}
     * @memberof ErrorResponse
     */
    errorMessage?: string;
}

/**
 * 
 * @export
 * @interface Feedback
 */
export interface Feedback {
    /**
     * 
     * @type {string}
     * @memberof Feedback
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Feedback
     */
    activityId: string;
    /**
     * 
     * @type {string}
     * @memberof Feedback
     */
    username: string;
    /**
     * 
     * @type {number}
     * @memberof Feedback
     */
    rating: number;
}

/**
 * 
 * @export
 * @interface Speaker
 */
export interface Speaker {
    /**
     * 
     * @type {string}
     * @memberof Speaker
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Speaker
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Speaker
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof Speaker
     */
    imageUrl: string;
    /**
     * 
     * @type {string}
     * @memberof Speaker
     */
    githubAccount?: string;
    /**
     * 
     * @type {string}
     * @memberof Speaker
     */
    twitterAccount?: string;
}


/**
 * DefaultApi - fetch parameter creator
 * @export
 */
export const DefaultApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Searches for activities of an edition
         * @param {string} editionId Year of the hosted edition
         * @param {string} [searchString] pass an optional search string for looking up activities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editionsEditionIdActivitiesGet(editionId: string, searchString?: string, options: any = {}): FetchArgs {
            // verify required parameter 'editionId' is not null or undefined
            if (editionId === null || editionId === undefined) {
                throw new RequiredError('editionId','Required parameter editionId was null or undefined when calling editionsEditionIdActivitiesGet.');
            }
            const localVarPath = `/editions/{editionId}/activities`
                .replace(`{${"editionId"}}`, encodeURIComponent(String(editionId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (searchString !== undefined) {
                localVarQueryParameter['searchString'] = searchString;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Adds feedback to an activity
         * @param {string} editionId Year of the hosted edition
         * @param {string} activityId The ID of the activity
         * @param {string} username Name of the user
         * @param {number} rating Rating provided
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editionsEditionIdFeedbackPost(editionId: string, activityId: string, username: string, rating: number, options: any = {}): FetchArgs {
            // verify required parameter 'editionId' is not null or undefined
            if (editionId === null || editionId === undefined) {
                throw new RequiredError('editionId','Required parameter editionId was null or undefined when calling editionsEditionIdFeedbackPost.');
            }
            // verify required parameter 'activityId' is not null or undefined
            if (activityId === null || activityId === undefined) {
                throw new RequiredError('activityId','Required parameter activityId was null or undefined when calling editionsEditionIdFeedbackPost.');
            }
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling editionsEditionIdFeedbackPost.');
            }
            // verify required parameter 'rating' is not null or undefined
            if (rating === null || rating === undefined) {
                throw new RequiredError('rating','Required parameter rating was null or undefined when calling editionsEditionIdFeedbackPost.');
            }
            const localVarPath = `/editions/{editionId}/feedback`
                .replace(`{${"editionId"}}`, encodeURIComponent(String(editionId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (activityId !== undefined) {
                localVarFormParams.set('activityId', activityId as any);
            }

            if (username !== undefined) {
                localVarFormParams.set('username', username as any);
            }

            if (rating !== undefined) {
                localVarFormParams.set('rating', rating as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves the speakers
         * @param {string} editionId Year of the hosted edition
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editionsEditionIdSpeakersGet(editionId: string, options: any = {}): FetchArgs {
            // verify required parameter 'editionId' is not null or undefined
            if (editionId === null || editionId === undefined) {
                throw new RequiredError('editionId','Required parameter editionId was null or undefined when calling editionsEditionIdSpeakersGet.');
            }
            const localVarPath = `/editions/{editionId}/speakers`
                .replace(`{${"editionId"}}`, encodeURIComponent(String(editionId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Searches for activities of an edition
         * @param {string} editionId Year of the hosted edition
         * @param {string} [searchString] pass an optional search string for looking up activities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editionsEditionIdActivitiesGet(editionId: string, searchString?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Activity>> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).editionsEditionIdActivitiesGet(editionId, searchString, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Adds feedback to an activity
         * @param {string} editionId Year of the hosted edition
         * @param {string} activityId The ID of the activity
         * @param {string} username Name of the user
         * @param {number} rating Rating provided
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editionsEditionIdFeedbackPost(editionId: string, activityId: string, username: string, rating: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Feedback> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).editionsEditionIdFeedbackPost(editionId, activityId, username, rating, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Retrieves the speakers
         * @param {string} editionId Year of the hosted edition
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editionsEditionIdSpeakersGet(editionId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Speaker>> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).editionsEditionIdSpeakersGet(editionId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Searches for activities of an edition
         * @param {string} editionId Year of the hosted edition
         * @param {string} [searchString] pass an optional search string for looking up activities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editionsEditionIdActivitiesGet(editionId: string, searchString?: string, options?: any) {
            return DefaultApiFp(configuration).editionsEditionIdActivitiesGet(editionId, searchString, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Adds feedback to an activity
         * @param {string} editionId Year of the hosted edition
         * @param {string} activityId The ID of the activity
         * @param {string} username Name of the user
         * @param {number} rating Rating provided
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editionsEditionIdFeedbackPost(editionId: string, activityId: string, username: string, rating: number, options?: any) {
            return DefaultApiFp(configuration).editionsEditionIdFeedbackPost(editionId, activityId, username, rating, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Retrieves the speakers
         * @param {string} editionId Year of the hosted edition
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editionsEditionIdSpeakersGet(editionId: string, options?: any) {
            return DefaultApiFp(configuration).editionsEditionIdSpeakersGet(editionId, options)(fetch, basePath);
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Searches for activities of an edition
     * @param {} editionId Year of the hosted edition
     * @param {} [searchString] pass an optional search string for looking up activities
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public editionsEditionIdActivitiesGet(editionId: string, searchString?: string, options?: any) {
        return DefaultApiFp(this.configuration).editionsEditionIdActivitiesGet(editionId, searchString, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Adds feedback to an activity
     * @param {} editionId Year of the hosted edition
     * @param {} activityId The ID of the activity
     * @param {} username Name of the user
     * @param {} rating Rating provided
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public editionsEditionIdFeedbackPost(editionId: string, activityId: string, username: string, rating: number, options?: any) {
        return DefaultApiFp(this.configuration).editionsEditionIdFeedbackPost(editionId, activityId, username, rating, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Retrieves the speakers
     * @param {} editionId Year of the hosted edition
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public editionsEditionIdSpeakersGet(editionId: string, options?: any) {
        return DefaultApiFp(this.configuration).editionsEditionIdSpeakersGet(editionId, options)(this.fetch, this.basePath);
    }

}

