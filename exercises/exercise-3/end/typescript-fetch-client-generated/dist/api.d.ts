/**
 * NodeConf API
 * This is the API for the NodeConf AR 2018
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@nodeconf.com.ar
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/// <reference path="../custom.d.ts" />
import { Configuration } from "./configuration";
/**
 *
 * @export
 */
export declare const COLLECTION_FORMATS: {
    csv: string;
    ssv: string;
    tsv: string;
    pipes: string;
};
/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}
/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}
/**
 *
 * @export
 * @class BaseAPI
 */
export declare class BaseAPI {
    protected basePath: string;
    protected fetch: FetchAPI;
    protected configuration: Configuration;
    constructor(configuration?: Configuration, basePath?: string, fetch?: FetchAPI);
}
/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export declare class RequiredError extends Error {
    field: string;
    name: "RequiredError";
    constructor(field: string, msg?: string);
}
/**
 *
 * @export
 * @interface Activity
 */
export interface Activity {
    /**
     *
     * @type {string}
     * @memberof Activity
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof Activity
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof Activity
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof Activity
     */
    type: Activity.TypeEnum;
    /**
     *
     * @type {Array&lt;Speaker&gt;}
     * @memberof Activity
     */
    speakers?: Array<Speaker>;
    /**
     *
     * @type {string}
     * @memberof Activity
     */
    startTime?: string;
    /**
     *
     * @type {string}
     * @memberof Activity
     */
    endTime?: string;
}
/**
 * @export
 * @namespace Activity
 */
export declare namespace Activity {
    /**
     * @export
     * @enum {string}
     */
    enum TypeEnum {
        Talk,
        Workshop,
        Keynote,
        Break,
        Lunch,
        Raffle
    }
}
/**
 * Response containing an error
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     *
     * @type {string}
     * @memberof ErrorResponse
     */
    errorMessage?: string;
}
/**
 *
 * @export
 * @interface Feedback
 */
export interface Feedback {
    /**
     *
     * @type {string}
     * @memberof Feedback
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof Feedback
     */
    activityId: string;
    /**
     *
     * @type {string}
     * @memberof Feedback
     */
    username: string;
    /**
     *
     * @type {number}
     * @memberof Feedback
     */
    rating: number;
}
/**
 *
 * @export
 * @interface Speaker
 */
export interface Speaker {
    /**
     *
     * @type {string}
     * @memberof Speaker
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof Speaker
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof Speaker
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof Speaker
     */
    imageUrl: string;
    /**
     *
     * @type {string}
     * @memberof Speaker
     */
    githubAccount?: string;
    /**
     *
     * @type {string}
     * @memberof Speaker
     */
    twitterAccount?: string;
}
/**
 * DefaultApi - fetch parameter creator
 * @export
 */
export declare const DefaultApiFetchParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Searches for activities of an edition
     * @param {string} editionId Year of the hosted edition
     * @param {string} [searchString] pass an optional search string for looking up activities
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editionsEditionIdActivitiesGet(editionId: string, searchString?: string, options?: any): FetchArgs;
    /**
     *
     * @summary Adds feedback to an activity
     * @param {string} editionId Year of the hosted edition
     * @param {string} activityId The ID of the activity
     * @param {string} username Name of the user
     * @param {number} rating Rating provided
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editionsEditionIdFeedbackPost(editionId: string, activityId: string, username: string, rating: number, options?: any): FetchArgs;
    /**
     *
     * @summary Retrieves the speakers
     * @param {string} editionId Year of the hosted edition
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editionsEditionIdSpeakersGet(editionId: string, options?: any): FetchArgs;
};
/**
 * DefaultApi - functional programming interface
 * @export
 */
export declare const DefaultApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Searches for activities of an edition
     * @param {string} editionId Year of the hosted edition
     * @param {string} [searchString] pass an optional search string for looking up activities
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editionsEditionIdActivitiesGet(editionId: string, searchString?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Activity[]>;
    /**
     *
     * @summary Adds feedback to an activity
     * @param {string} editionId Year of the hosted edition
     * @param {string} activityId The ID of the activity
     * @param {string} username Name of the user
     * @param {number} rating Rating provided
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editionsEditionIdFeedbackPost(editionId: string, activityId: string, username: string, rating: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Feedback>;
    /**
     *
     * @summary Retrieves the speakers
     * @param {string} editionId Year of the hosted edition
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editionsEditionIdSpeakersGet(editionId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Speaker[]>;
};
/**
 * DefaultApi - factory interface
 * @export
 */
export declare const DefaultApiFactory: (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) => {
    /**
     *
     * @summary Searches for activities of an edition
     * @param {string} editionId Year of the hosted edition
     * @param {string} [searchString] pass an optional search string for looking up activities
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editionsEditionIdActivitiesGet(editionId: string, searchString?: string, options?: any): Promise<Activity[]>;
    /**
     *
     * @summary Adds feedback to an activity
     * @param {string} editionId Year of the hosted edition
     * @param {string} activityId The ID of the activity
     * @param {string} username Name of the user
     * @param {number} rating Rating provided
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editionsEditionIdFeedbackPost(editionId: string, activityId: string, username: string, rating: number, options?: any): Promise<Feedback>;
    /**
     *
     * @summary Retrieves the speakers
     * @param {string} editionId Year of the hosted edition
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editionsEditionIdSpeakersGet(editionId: string, options?: any): Promise<Speaker[]>;
};
/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export declare class DefaultApi extends BaseAPI {
    /**
     *
     * @summary Searches for activities of an edition
     * @param {} editionId Year of the hosted edition
     * @param {} [searchString] pass an optional search string for looking up activities
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    editionsEditionIdActivitiesGet(editionId: string, searchString?: string, options?: any): Promise<Activity[]>;
    /**
     *
     * @summary Adds feedback to an activity
     * @param {} editionId Year of the hosted edition
     * @param {} activityId The ID of the activity
     * @param {} username Name of the user
     * @param {} rating Rating provided
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    editionsEditionIdFeedbackPost(editionId: string, activityId: string, username: string, rating: number, options?: any): Promise<Feedback>;
    /**
     *
     * @summary Retrieves the speakers
     * @param {} editionId Year of the hosted edition
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    editionsEditionIdSpeakersGet(editionId: string, options?: any): Promise<Speaker[]>;
}
